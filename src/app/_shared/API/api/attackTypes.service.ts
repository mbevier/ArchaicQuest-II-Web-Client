/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable, of }                                        from 'rxjs';

import { OptionDescriptive } from '../model/optionDescriptive';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AttackTypesService {

    protected basePath = 'http://localhost:62640';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public attackTypesGet(id: string, observe?: 'body', reportProgress?: boolean): Observable<OptionDescriptive>;
    public attackTypesGet(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<OptionDescriptive>>;
    public attackTypesGet(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<OptionDescriptive>>;
    public attackTypesGet(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling attackTypesGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<OptionDescriptive>(`${this.basePath}/api/Character/AttackType/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public attackTypesGetAll(observe?: 'body', reportProgress?: boolean): Observable<Array<OptionDescriptive>>;
    public attackTypesGetAll(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<OptionDescriptive>>>;
    public attackTypesGetAll(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<OptionDescriptive>>>;
    public attackTypesGetAll(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<OptionDescriptive>>(`${this.basePath}/api/Character/AttackType`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param name 
     * @param dateCreated 
     * @param createdBy 
     * @param description 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public attackTypesPost(id?: number, name?: string, dateCreated?: Date, createdBy?: string, description?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public attackTypesPost(id?: number, name?: string, dateCreated?: Date, createdBy?: string, description?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public attackTypesPost(id?: number, name?: string, dateCreated?: Date, createdBy?: string, description?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public attackTypesPost(id?: number, name?: string, dateCreated?: Date, createdBy?: string, description?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {






        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('Id', <any>id);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('Name', <any>name);
        }
        if (dateCreated !== undefined && dateCreated !== null) {
            queryParameters = queryParameters.set('DateCreated', <any>dateCreated.toISOString());
        }
        if (createdBy !== undefined && createdBy !== null) {
            queryParameters = queryParameters.set('CreatedBy', <any>createdBy);
        }
        if (description !== undefined && description !== null) {
            queryParameters = queryParameters.set('Description', <any>description);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post<any>(`${this.basePath}/api/Character/AttackType`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
