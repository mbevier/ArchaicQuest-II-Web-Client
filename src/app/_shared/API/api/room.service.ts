/**
 * My Title
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable, of }                                        from 'rxjs';

import { Room } from '../model/room';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class RoomService {

    protected basePath = 'http://localhost:62640';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roomGet(id: number, observe?: 'body', reportProgress?: boolean): Observable<Room>;
    public roomGet(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Room>>;
    public roomGet(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Room>>;
    public roomGet(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling roomGet.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Room>(`${this.basePath}/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roomGet2(id: number, observe?: 'body', reportProgress?: boolean): Observable<Room>;
    public roomGet2(id: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Room>>;
    public roomGet2(id: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Room>>;
    public roomGet2(id: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling roomGet2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Room>(`${this.basePath}/api/World/Room/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param room 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roomPost(room: Room, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public roomPost(room: Room, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public roomPost(room: Room, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public roomPost(room: Room, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (room === null || room === undefined) {
            throw new Error('Required parameter room was null or undefined when calling roomPost.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/api/World/Room`,
            room,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param data 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roomPut(data: Room, id: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public roomPut(data: Room, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public roomPut(data: Room, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public roomPut(data: Room, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling roomPut.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling roomPut.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/api/World/Room/${encodeURIComponent(String(id))}`,
            data,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roomUpdateRoomCache(observe?: 'body', reportProgress?: boolean): Observable<Blob>;
    public roomUpdateRoomCache(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Blob>>;
    public roomUpdateRoomCache(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Blob>>;
    public roomUpdateRoomCache(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.post(`${this.basePath}/api/World/Room/updateCache`,
            null,
            {
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param x 
     * @param y 
     * @param z 
     * @param areaId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roomValidExit(x: number, y: number, z: number, areaId: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public roomValidExit(x: number, y: number, z: number, areaId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public roomValidExit(x: number, y: number, z: number, areaId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public roomValidExit(x: number, y: number, z: number, areaId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (x === null || x === undefined) {
            throw new Error('Required parameter x was null or undefined when calling roomValidExit.');
        }

        if (y === null || y === undefined) {
            throw new Error('Required parameter y was null or undefined when calling roomValidExit.');
        }

        if (z === null || z === undefined) {
            throw new Error('Required parameter z was null or undefined when calling roomValidExit.');
        }

        if (areaId === null || areaId === undefined) {
            throw new Error('Required parameter areaId was null or undefined when calling roomValidExit.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/${encodeURIComponent(String(x))}/${encodeURIComponent(String(y))}/${encodeURIComponent(String(z))}/${encodeURIComponent(String(areaId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param x 
     * @param y 
     * @param z 
     * @param areaId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public roomValidExit2(x: number, y: number, z: number, areaId: number, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public roomValidExit2(x: number, y: number, z: number, areaId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public roomValidExit2(x: number, y: number, z: number, areaId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public roomValidExit2(x: number, y: number, z: number, areaId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (x === null || x === undefined) {
            throw new Error('Required parameter x was null or undefined when calling roomValidExit2.');
        }

        if (y === null || y === undefined) {
            throw new Error('Required parameter y was null or undefined when calling roomValidExit2.');
        }

        if (z === null || z === undefined) {
            throw new Error('Required parameter z was null or undefined when calling roomValidExit2.');
        }

        if (areaId === null || areaId === undefined) {
            throw new Error('Required parameter areaId was null or undefined when calling roomValidExit2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'text/plain',
            'application/json',
            'text/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<boolean>(`${this.basePath}/api/World/Room/${encodeURIComponent(String(x))}/${encodeURIComponent(String(y))}/${encodeURIComponent(String(z))}/${encodeURIComponent(String(areaId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
